<!DOCTYPE html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Formulario juegos</title>
        <!-- <link rel="stylesheet" type="text/css" href="/styles/addquestion.css" /> -->
        <!-- Google Fonts -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/css/bootstrap.min.css"/>
        <link href="https://fonts.googleapis.com/css?family=Montserrat|Poppins|Raleway&display=swap"rel="stylesheet"/>
        <style>
            .fruit-list-move {
            transition: transform 1s;
            }
            .fruit-table-move {
            transition: transform 1s;
            }
        </style>
    </head>
    <body>

        <div class="container" id="app">
            <h3>Juegos</h3>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Tiempo</th>
                        <th>Pregunta</th>
                        <th>Pregunta max</th>
                        <th>Finalizado</th>
                        <th>Ultima actualización</th>
                        <!-- <th>Acción</th> -->
                    </tr>
                </thead>
                <tbody name="fruit-table" is="transition-group">
                    <tr v-for="juego in juegosOrdenados" :key="juego._id">
                        <td v-html="juego.usuario"></td>
                        <td> {{ juego.tiempo }} s.</td>
                        <td> <small class="text-muted" v-html="juego.nivel_actual"></small></td>
                        <td> <small class="text-muted" v-html="juego.nivel_maximo"></small></td>
                        <td> {{ juego.finalizado ? 'SI' : 'NO' }}</td>
                        <td> {{ juego.updated_at | timeago }}</td>
                        <!--
                        <td>
                            <button type="button" v-on:click="eliminarJuego(juego)" class="btn btn-danger btn-sm">Eliminar</button>
                        </td>
                        -->
                    </tr>
                </tbody>
            </table>
        </div>
        

        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js" integrity="sha256-AdQN98MVZs44Eq2yTwtoKufhnU+uZ7v2kXnD5vqzZVo=" crossorigin="anonymous"></script>
        <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>
        <script>
            moment.locale('es');
            const socket = io();
            const fieldSorter = (fields) => (a, b) => fields.map(o => {
                let dir = 1;
                if (o[0] === '-') { dir = -1; o=o.substring(1); }
                return a[o] > b[o] ? dir : a[o] < b[o] ? -(dir) : 0;
            }).reduce((p, n) => p ? p : n, 0);

            socket.on("savedGame", (data) => {
                app.addGame(data);
            });

            var app = new Vue({
                el: '#app',
                data: {
                    juegos: [],
                },
                methods: {
                    getJuegos(){
                        axios.get('api/games').then(response => {
                            this.juegos = response.data;
                        }).catch(error => {
                            console.log(error);
                        }).then(()=>{});
                    },
                    eliminarJuego(juego){
                        /*if(!confirm('¿Seguro deseas eliminar?')) return;
                        axios.post('question-remove/'+juego._id).then(response => {
                            this.juegos = this.juegos.filter((a) => a._id != juego._id);
                        }).catch(error => {
                            console.log(error);
                        }).then(()=>{ });*/
                    },
                    addGame(juego){
                        let i = this.juegos.findIndex(x => x._id == juego._id)
                        if( i === -1 ){ this.juegos.push(juego); }
                        else { this.juegos.splice(i, 1, juego) }
                        console.log(juego);
                    },
                },
                created: function(){
                    this.getJuegos();
                },
                computed: {
                    juegosOrdenados: function(){
                        return this.juegos.sort(fieldSorter(['-nivel_actual', 'tiempo']));
                    },
                },
		    	filters: {
		            timeago(value) {
		                return moment(value).local().calendar();//.fromNow()
		            }
		        },
            });
        </script>
    </body>
</html>
